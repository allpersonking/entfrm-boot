package ${basePackage}.${moduleName}.controller;

import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
#if($table.tplCategory == 'crud')
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#end
import ${packageName}.entity.${ClassName};
import ${packageName}.service.${ClassName}Service;
import com.entfrm.core.log.annotation.OperLog;
import org.springframework.security.access.prepost.PreAuthorize;
import com.entfrm.core.base.api.R;
import com.entfrm.core.base.util.ExcelUtil;
import lombok.AllArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Arrays;

/**
 * @author ${author}
 * @date ${datetime}
 *
 * @description ${functionName}Controller
 */
@RestController
@AllArgsConstructor
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller {

    private final ${ClassName}Service ${className}Service;

    private QueryWrapper<${ClassName}> getQueryWrapper(${ClassName} ${className}) {
        return new QueryWrapper<${ClassName}>()
#foreach ($column in $columns)
    #if(${column.isQuery} == '1' && "createTime" != ${column.javaField} && "Integer" != ${column.javaType})
        .${column.queryType}(StrUtil.isNotBlank(${className}.get${column.uJavaField()}()), "${column.lJavaField()}", ${className}.get${column.uJavaField()}())
    #elseif(${column.isQuery} == '1' && "createTime" != ${column.javaField} && "Integer" == ${column.javaType})
        .${column.queryType}(!StrUtil.isEmptyIfStr(${className}.get${column.uJavaField()}()), "${column.lJavaField()}", ${className}.get${column.uJavaField()}())
    #elseif(${column.isQuery} == '1' && "createTime" == ${column.javaField} && ${column.queryType} == 'between')
        .between(StrUtil.isNotBlank(${className}.getBeginTime()) && StrUtil.isNotBlank(${className}.getEndTime()), "create_time", ${className}.getBeginTime(), ${className}.getEndTime());
    #end
#end
                .orderByDesc("create_time");
    }

    #if($table.tplCategory == 'tree')
        /**
         * 查询${functionName}树列表
         */
        @PreAuthorize("@ps.hasPerm('${permissionPrefix}_view')")
        @GetMapping("/list")
        @ResponseBody
        public R list(${ClassName} ${className}) {
            List<${ClassName}> ${className}List = ${className}Service.list(getQueryWrapper(${className}));
        #*if(${className}List.size() >0 ){
            for(${ClassName} ${className}1 : ${className}List){
                if(StrUtil.isNotBlank(${className}.getName()) || StrUtil.isNotBlank(${className}.getStatus())){
                    ${className}1.setParentId(0);
                }
            }
        }*#
            return R.ok(${className}List);
        }
    #elseif($table.tplCategory == 'crud')

        @PreAuthorize("@ps.hasPerm('${permissionPrefix}_view')")
        @GetMapping("/list")
        @ResponseBody
        public R list(Page page, ${ClassName} ${className}) {
            IPage<${ClassName}> ${className}Page = ${className}Service.page(page, getQueryWrapper(${className}));
            return R.ok(${className}Page.getRecords(), ${className}Page.getTotal());
        }
    #end

    @GetMapping("/{id}")
    public R getById(@PathVariable("id") Integer id) {
        return R.ok(${className}Service.getById(id));
    }

    @OperLog("${functionName}新增")
    @PreAuthorize("@ps.hasPerm('${permissionPrefix}_add')")
    @PostMapping("/save")
    @ResponseBody
    public R save(@Validated @RequestBody ${ClassName} ${className}) {
            ${className}Service.save(${className});
        return R.ok();
    }

    @OperLog("${functionName}修改")
    @PreAuthorize("@ps.hasPerm('${permissionPrefix}_edit')")
    @PutMapping("/update")
    @ResponseBody
    public R update(@Validated @RequestBody ${ClassName} ${className}) {
            ${className}Service.updateById(${className});
        return R.ok();
    }


    @OperLog("${functionName}删除")
    @PreAuthorize("@ps.hasPerm('${permissionPrefix}_del')")
    @GetMapping("/remove/{${pkColumn.javaField}}")
    @ResponseBody
    public R remove(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.ok(${className}Service.removeById(${pkColumn.javaField}));
    }


    #if($table.tplCategory == 'tree')
        @GetMapping("/${className}Tree")
        @ResponseBody
        public R ${className}Tree() {
            List<${ClassName}> ${className}List = ${className}Service.list(new QueryWrapper<${ClassName}>().orderByAsc("sort"));
            return R.ok(${className}Service.buildTree(${className}List, 0));
        }
    #end

    @PreAuthorize("@ps.hasPerm('${permissionPrefix}_export')")
    @GetMapping("/export")
    @ResponseBody
    public R export(${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.list(getQueryWrapper(${className}));
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}. class);
        return util.exportExcel(list, "${functionName}数据");
    }
}
