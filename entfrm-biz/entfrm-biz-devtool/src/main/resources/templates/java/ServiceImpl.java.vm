package ${packageName}.service.impl;

import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
    #if($table.tplCategory == 'tree')
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.List;
    #end
import org.springframework.stereotype.Service;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.${ClassName}Service;

/**
 * @author ${author}
 * @date ${datetime}
 *
 * @description ${functionName}Service业务层
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements ${ClassName}Service {
    #if($table.tplCategory == 'tree')
        /**
      * 构建树
      *
      * @param list     分类表
      * @param parentId 传入的父节点ID
      * @return String
      */
        public List<${ClassName}> buildTree(List<${ClassName}> list, int parentId) {
            List<${ClassName}> ${className}List = new ArrayList<>();
            for (Iterator<${ClassName}> iterator = list.iterator(); iterator.hasNext(); ) {
                ${ClassName} t = (${ClassName}) iterator.next();
                if (t.getParentId() == parentId) {
                    recursion(list, t);
                    ${className}List.add(t);
                }
            }
            return ${className}List;
        }

        /**
       * 递归列表
       *
       * @param list
       * @param t
       */
        private void recursion(List<${ClassName}> list, ${ClassName} t) {
            // 得到子节点列表
            List<${ClassName}> childList = getChildList(list, t);
            t.setChildren(childList);
            for (${ClassName} tChild : childList) {
                if (hasChild(list, tChild)) {
                    // 判断是否有子节点
                    Iterator<${ClassName}> it = childList.iterator();
                    while (it.hasNext()) {
                        ${ClassName} n = (${ClassName}) it.next();
                        recursion(list, n);
                    }
                }
            }
        }

        /**
         * 得到子节点列表
         */
        private List<${ClassName}> getChildList(List<${ClassName}> list, ${ClassName} t) {
            List<${ClassName}> tlist = new ArrayList<${ClassName}>();
            Iterator<${ClassName}> it = list.iterator();
            while (it.hasNext()) {
                ${ClassName} n = (${ClassName}) it.next();
                if (n.getParentId() == t.getId()) {
                    tlist.add(n);
                }
            }
            return tlist;
        }

        /**
         * 判断是否有子节点
         */
        private boolean hasChild(List<${ClassName}> list, ${ClassName} t) {
            return getChildList(list, t).size() > 0 ? true : false;
        }

    #end
}
